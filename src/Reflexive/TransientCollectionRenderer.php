<?php

namespace olvlvl\ComposerAttributeCollector\Reflexive;

use olvlvl\ComposerAttributeCollector\TransientCollection;
use olvlvl\ComposerAttributeCollector\TransientCollectionRenderer as Contract;

final class TransientCollectionRenderer implements Contract
{
    public static function render(TransientCollection $collector): string
    {
        $index_by_attributes = self::index_by_attributes($collector);
        $rendered_attributes = self::render_attributes($index_by_attributes);

        return <<<PHP
        <?php

        // attributes.php @generated by https://github.com/olvlvl/composer-attribute-collector

        \olvlvl\ComposerAttributeCollector\Attributes::with(fn () => new \olvlvl\ComposerAttributeCollector\Reflexive\Collection(
        $rendered_attributes
        ));
        PHP;
    }

    /**
     * @return array<class-string, array{
     *     classes?: array<class-string>,
     *     methods?: array<class-string, string>,
     *     properties?: array<class-string, string>
     * }>
     */
    private static function index_by_attributes(TransientCollection $collector): array
    {
        $by_attributes = [];

        foreach ($collector->classes as $class => $targets) {
            foreach ($targets as $target) {
                $by_attributes[$target->attribute]['classes'][] = $class;
            }
        }

        foreach ($collector->methods as $class => $targets) {
            foreach ($targets as $target) {
                $by_attributes[$target->attribute]['methods'][] = [ $class, $target->name ];
            }
        }

        foreach ($collector->properties as $class => $targets) {
            foreach ($targets as $target) {
                $by_attributes[$target->attribute]['properties'][] = [ $class, $target->name ];
            }
        }

        array_walk($by_attributes, function (&$value) {
            foreach ($value as &$v) {
                $v = array_unique($v, SORT_REGULAR);
            }
        });

        ksort($by_attributes);

        return $by_attributes; // @phpstan-ignore return.type
    }

    /**
     * @param array<class-string, array{
     *     classes?: array<class-string>,
     *     methods?: array<class-string, string>,
     *     properties?: array<class-string, string>
     * }> $index_by_attributes
     */
    private static function render_attributes(array $index_by_attributes): string
    {
        $r = var_export($index_by_attributes, true);
        $r = str_replace('\\\\', '\\', $r);
        $r = str_replace('array (', '[', $r);
        $r = str_replace(')', ']', $r);

        return $r;
    }
}
